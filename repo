def field_generator():
    new_list = []
    for _i in range(3):
        new_list.append([])
        for _j in range(3):
            new_list[_i].append(' ')
    return new_list


def field_print(any_list):
    print('---------')
    print('|', any_list[0][2], any_list[1][2], any_list[2][2], '|')
    print('|', any_list[0][1], any_list[1][1], any_list[2][1], '|')
    print('|', any_list[0][0], any_list[1][0], any_list[2][0], '|')
    print('---------')


def moves_changer():
    global counter
    if counter % 2 == 0:
        move = 'O'
    elif counter % 2 != 0:
        move = 'X'
    return move


def coordinates_entering(list_to_process):

    status1 = True
    filled_field_list = list_to_process[:]

    while status1:
        coordinates = input("Enter the coordinates: ").split(" ")
        if coordinates[0].isdigit() is False or coordinates[1].isdigit() is False:
            print('You should enter number!')
        elif 1 > int(coordinates[0]) or int(coordinates[0]) > 3 or 1 > int(coordinates[1]) or int(coordinates[1]) > 3:
            print("Coordinates should be from 1 to 3!")
        elif filled_field_list[int(coordinates[0]) - 1][int(coordinates[1]) - 1] is not ' ':
            print("This cell is occupied! Choose another one!")
        else:
            filled_field_list[int(coordinates[0]) - 1][int(coordinates[1]) - 1] = moves_changer()
            status1 = False
    return filled_field_list


def winning_lines(list_to_process):
    list_to_compare = list_to_process
    winning_matrix = [[list_to_compare[0][2], list_to_compare[1][2], list_to_compare[2][2]],
                      [list_to_compare[0][1], list_to_compare[1][1], list_to_compare[2][1]],
                      [list_to_compare[0][0], list_to_compare[1][0], list_to_compare[2][0]],
                      [list_to_compare[0][0], list_to_compare[0][1], list_to_compare[0][2]],
                      [list_to_compare[1][0], list_to_compare[1][1], list_to_compare[1][2]],
                      [list_to_compare[2][0], list_to_compare[2][1], list_to_compare[2][2]],
                      [list_to_compare[0][0], list_to_compare[1][1], list_to_compare[2][2]],
                      [list_to_compare[0][2], list_to_compare[1][1], list_to_compare[2][0]]]

    all_one = []
    for x in range(8):
        for y in range(3):
            all_one.append(all(winning_matrix[x][y] is moves_changer() for winning_matrix[x][y] in winning_matrix[x]))
    #print(winning_matrix)
    #print(all_one)
    if any(all_one):
        return 1
    else:
        return 0


board = field_generator()
field_print(board)
counter = 1

status = True
while status:
    field_changed = coordinates_entering(board)
    field_print(field_changed)
    print(winning_lines(field_changed))

    if winning_lines(field_changed) is 1:
        print(f'{moves_changer()} wins')
        status = False
    elif (winning_lines(field_changed) is 0) and (counter == 9):
        print("Draw")
        status = False
    counter += 1
    #print(counter)
